type: collection.insomnia.rest/5.0
name: GoRest API Tests
meta:
  id: wrk_d3539367b3d34b24bc5d02a5fb08fb6f
  created: 1761691572856
  modified: 1761691693324
  description: ""
collection:
  - name: Users
    meta:
      id: fld_979be5f79cec48fea88c883fc24d44df
      created: 1761691747960
      modified: 1761696561403
      sortKey: -1761691747960
      description: ""
    children:
      - url: "{{baseUrl}}/users"
        name: TC01 - List Users
        meta:
          id: req_340602d138f94ccb9ac727719fae45ba
          created: 1761691572861
          modified: 1761694423445
          isPrivate: false
          description: ""
          sortKey: -1761691758338
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: |
            
            insomnia.test('TC01 - Check if status is 200', () => {
                insomnia.expect(insomnia.response.code).to.eql(200);
            });

            // Converte o corpo da resposta para JSON
            const data = JSON.parse(insomnia.response.body);

            // Salva o ID do primeiro usuário no ambiente
            if (data.length > 0) {
                insomnia.environment.set('userId', data[0].id);
                console.log('UserId salvo:', data[0].id);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{baseUrl}}/users/{{userId}}"
        name: TC02 - Get user by valid ID
        meta:
          id: req_135b642afff9439cbdc12c9a8d216286
          created: 1761691822004
          modified: 1761693959183
          isPrivate: false
          description: ""
          sortKey: -1761691758288
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: >-
            
            insomnia.test('TC02 - Get user by ID - Check if status is 200', ()
            => {
                insomnia.expect(insomnia.response.code).to.eql(200);
            });



            insomnia.test('TC02 - Validate mandatory fields in user response',
            () => {
            		// Converte o corpo da resposta para JSON
            		const data = JSON.parse(insomnia.response.body);
            		
            		// Verifica se é um objeto
            		insomnia.expect(data).to.be.an('object');
            	
            	  // Verifica campos obrigatorios
            		insomnia.expect(data).to.have.property('id');
            		insomnia.expect(data).to.have.property('name');
            		insomnia.expect(data).to.have.property('email');
            		insomnia.expect(data).to.have.property('gender');
            		insomnia.expect(data).to.have.property('status');

            	
            })
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{baseUrl}}/users"
        name: TC04 - Create a valid user
        meta:
          id: req_3a159a97335c460aaed90dd2fcde5d34
          created: 1761691845579
          modified: 1761695703544
          isPrivate: false
          description: ""
          sortKey: -1761691758238
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
                "name": "{% faker 'randomFullName' %}",
                "email": "{% faker 'randomEmail' %}",
                "gender": "male",
                "status": "inactive"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: >-
            insomnia.test("TC04 - Create a valid user - Status code is 201",
            ()=> { 		insomnia.expect(insomnia.response.code).to.eql(201);

            });


            var data = JSON.parse(insomnia.response.body);

            var newUserId = data.id;

            var newUserEmail = data.email  // ID do usuário criado no JSON de
            resposta


            insomnia.environment.set('userId', newUserId);

            insomnia.environment.set('newUserEmail', newUserEmail);

            console.log("Novo UserId salvo no ambiente:", newUserId)

            console.log("Novo UserEmail salvo no ambiente:", newUserEmail)
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{baseUrl}}/users"
        name: TC05 - Create user with duplicate email
        meta:
          id: req_557983ef427945d29707e2ebecd26a1c
          created: 1761691880672
          modified: 1761695957080
          isPrivate: false
          description: ""
          sortKey: -1761691758188
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
                "name": "Lucas Simulado Junior",
                "email": "{{newUserEmail}}",
                "gender": "male",
                "status": "inactive"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: >
            
            // Valida status code 422

            insomnia.test("TC05 – Create user with duplicate email – Status code
            is 422", function () {
                insomnia.response.to.have.status(422);
            });


            // Validar a mensagem de erro

            insomnia.test("TC05 – Response body contains error message",
            function () {
                const jsonData = insomnia.response.json();
                insomnia.expect(jsonData).to.be.an("array");
                insomnia.expect(jsonData[0]).to.have.property("field", "email");
                insomnia.expect(jsonData[0]).to.have.property("message");
                insomnia.expect(jsonData[0].message.toLowerCase()).to.include("has already been taken");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{baseUrl}}/users/{{userId}}"
        name: TC06 - Update existing user
        meta:
          id: req_4076cd45f2f84070beeb59cbfce78cd3
          created: 1761691902937
          modified: 1761696200742
          isPrivate: false
          description: ""
          sortKey: -1761691758088
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
                "name": "Lucas Atualizado",
                "email": "lucas.simulado123atualizado@example.com",
                "gender": "male",
                "status": "inactive"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: >
            // Valida status code 200

            insomnia.test("TC06 – Update existing user successfully – Status
            code is 200", function () {
                insomnia.response.to.have.status(200);
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{baseUrl}}/users/{{userIdInvalid}}"
        name: TC08 - Delete invalid user
        meta:
          id: req_422f46bf03514633af7a69f6c196c093
          created: 1761691926868
          modified: 1761696527643
          isPrivate: false
          description: ""
          sortKey: -1761691757838
        method: DELETE
        headers:
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: >-
            // Valida status code 404 para usuário inválido ou inexistente

            insomnia.test("TC08 – Delete invalid user – Status code is 404",
            function () {
                insomnia.response.to.have.status(404);
            });


            // Valida a mensagem de erro na resposta

            insomnia.test("TC08 – Response body contains error message",
            function () {
                const jsonData = insomnia.response.json();
                insomnia.expect(jsonData).to.be.an("object");
                insomnia.expect(jsonData).to.have.property("message");
                insomnia.expect(jsonData.message.toLowerCase()).to.include("not found");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{baseUrl}}/users/{{userIdInvalid}}"
        name: TC03 - Get user by invalid ID
        meta:
          id: req_32c93e7cc0574c4289e8cce48d2d4c49
          created: 1761691951927
          modified: 1761696423329
          isPrivate: false
          description: ""
          sortKey: -1761691757938
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: >-
            // Valida status code 404

            insomnia.test("TC03 – Get user by invalid ID – Status code is 404",
            function () {
                insomnia.response.to.have.status(404);
            });




            // Validar a mensagem de erro

            insomnia.test("TC03 – Response body contains error message",
            function () {
                const jsonData = insomnia.response.json();
                insomnia.expect(jsonData).to.be.an("object");
                insomnia.expect(jsonData).to.have.property("message");
                insomnia.expect(jsonData.message.toLowerCase()).to.include("not found");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{baseUrl}}/users/{{userId}}"
        name: TC07 - Delete valid user
        meta:
          id: req_7d4955c40a3f4f89aae8c7f98ab9a9b0
          created: 1761691970217
          modified: 1761696477120
          isPrivate: false
          description: ""
          sortKey: -1761691757988
        method: DELETE
        headers:
          - name: User-Agent
            value: insomnia/11.6.2
        scripts:
          afterResponse: >
            // Valida status code 204 (No Content) após deletar o usuário

            insomnia.test("TC07 – Delete valid user – Status code is 204",
            function () {
                insomnia.response.to.have.status(204);
            });


            // Opcional: pode validar que o corpo da resposta está vazio

            insomnia.test("TC07 – Response body is empty", function () {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
    authentication:
      type: bearer
      token: "{{token}}"
      disabled: false
    environment:
      "": ""
cookieJar:
  name: Default Jar
  meta:
    id: jar_428b9dedea803dcb7853d6536637f808e3c71be1
    created: 1761691572859
    modified: 1761696561399
environments:
  name: Base Environment
  meta:
    id: env_428b9dedea803dcb7853d6536637f808e3c71be1
    created: 1761691572858
    modified: 1761696561402
    isPrivate: false
  data:
    "": ""
  subEnvironments:
    - name: QA_env_gorest_api
      meta:
        id: env_99c1b86bef4248089063505926f74c94
        created: 1761692115283
        modified: 1761696561401
        isPrivate: false
        sortKey: 1761692115284
      data:
        baseUrl: https://gorest.co.in/public/v2/
        token: 81a694455e51f884a8574b315decd32660c5efe89969c2f547ee24ae2cbb7c7c
        userId: 8215290
        userIdInvalid: "99999999"
        newUserEmail: Opal_Breitenberg-Douglas@yahoo.com
